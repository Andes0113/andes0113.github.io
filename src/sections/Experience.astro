---
import ExperienceItem from '@/components/ExperienceItem.astro';
import type { ExperienceItemProps } from '../components/ExperienceItem.astro';

const experiences: ExperienceItemProps[] = [
  {
    title: 'Software Engineer',
    company: 'Meta',
    companyDescription:
      'Meta is a global technology company with a mission to make a more connected world.',
    concentration: 'Backend',
    date: 'August 2025 - Present',
    description: [
      `I'm a software engineer at Menlo Park, working on WhatsApp Business Messaging Cloud \
       If you work at Meta or live in the Bay Area, feel free to reach out! I'm always \
       happy to make some new friends.`,
    ],
    techStack: ['C++', 'Hack'],
    fromRight: true,
  },
  {
    title: 'Software Engineer Intern',
    company: 'Wizards of the Coast',
    companyDescription:
      'Wizards of the Coast is a game company that publishes games like Magic: The Gathering and \
    Dungeons & Dragons. I worked in the Online Game Services team, which is responsible for the \
    backend services that power their digital games.',
    concentration: 'Backend',
    date: 'June 2024 - August 2024',
    description: [
      'As an intern, I worked with both a team responsible for microservices using Go and Kubernetes \
      and a team of interns on an intern project using C# and .NET.',
      'I worked with a microservices team using Go and Kubernetes, developing gRPC-based endpoints, \
      finding and fixing bugs, and using databases like Postgres and Redis in a distributed environment.',
      'My intern project involved using C# and .NET to create a testing platform for \
      transaction integration with Steam, overcoming scope creep and tight deadlines.',
      'Despite dealing with scope creep and a tight deadline, we delivered a successful MVP \
      that now serves as a reference tool for game developers and a testing resource for backend \
      developers within the company.',
    ],
    techStack: ['Go', 'AWS', 'Postgres', 'Redis', 'Kubernetes', 'C#', '.NET'],
    fromLeft: true,
  },
  {
    title: 'Software Engineer',
    company: 'MIDL',
    companyDescription:
      'MIDL Intelligence is a startup that provides software solutions for security systems, \
      using computer vision and machine learning to detect, identify, and track objects and events.',
    concentration: 'Full Stack',
    date: 'August 2022 - December 2023',
    description: [
      'I started at MIDL as an intern before converting to a part-time/full-time employee, and in a short time my technical skills skyrocketed.',
      'I worked part-time during the school year and full-time during the summer. \
      Working consistently with MIDL allowed me to gain a lot of experience in a short time, \
      and I quickly grew into a more senior role.',
      'I worked primarily as a full stack developer using Next.js, but as I gained confidence and ability I began to wear more hats. \
      I gained experience with system design, machine learning, and high-load backend services with real-time data.',
      'I led important projects, working to build vital features on tight deadlines that spanned complex frontend and backend systems.',
    ],
    techStack: [
      'TypeScript',
      'Next.js',
      'AWS',
      'React',
      'MongoDB',
      'Postgres',
      'Tailwind',
      'Go',
    ],
    fromRight: true,
  },
];
---

<div class="experience-container">
  {experiences.map((experience) => <ExperienceItem {...experience} />)}
</div>

<script>
  const items = document.querySelectorAll('.experience-item');
  items.forEach((item) => {
    const companyId = item.children[0].children[0].children[0]
      .textContent!.trim()
      .split(' ')
      .join('-');

    const intersectionAnchor = item.querySelector('.intersection-anchor');
    if (!intersectionAnchor) return;

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          toggleItem(companyId);
          observer.unobserve(entry.target);
        }
      });
    });
    observer.observe(intersectionAnchor);
  });

  function toggleItem(companyId: string) {
    const item = document.querySelector(`#${companyId}`);

    if (item) {
      item.classList.remove('from-right', 'from-left');
    }
  }
</script>

<style>
  .experience-container {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }
</style>
