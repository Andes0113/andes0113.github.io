---
import { cn } from '../common/utils';
interface SectionProps {
  title: string;
  fromRight?: boolean;
  fromBottom?: boolean;
}
const { title, fromRight, fromBottom } = Astro.props;
const sectionTitle = title.split(' ').join('-');

const direction = fromBottom
  ? 'from-bottom'
  : fromRight
    ? 'from-right'
    : 'from-left';
---

<h3 class="section-title">{title}</h3>
<div id={sectionTitle} class="section">
  <div
    id={`${sectionTitle}-content`}
    class={cn('section-content hidden', direction)}
  >
    <slot />
  </div>
</div>

<script>
  const headings = document.querySelectorAll('.section-title');
  headings.forEach((h) => {
    const sectionTitle = h.textContent!.trim().split(' ').join('-');
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          toggleSection(sectionTitle);
          observer.unobserve(entry.target);
        }
      });
    });
    observer.observe(h);
  });

  function toggleSection(sectionTitle: string) {
    const sectionContent = document.querySelector(`#${sectionTitle}-content`);

    if (sectionContent) {
      sectionContent.classList.remove('hidden');
      sectionContent.classList.remove('from-right', 'from-left', 'from-bottom');
    }
  }
</script>

<style>
  .section {
    margin-top: 2rem;
    overflow: hidden;
  }
  .section-title {
    margin-top: 1rem;
  }
  .section-content {
    border-radius: 3px;
    padding: 0.5rem 1rem;
    margin: 1rem 1.5rem;
    -webkit-transition: all 1s ease-in;
    -moz-transition: all 1s ease-in;
    -o-transition: all 1s ease-in;
    transition: all 1s ease-in;
    overflow: hidden;
  }
  .section-content.hidden {
    opacity: 0;
  }
  .section-content.from-right {
    margin-left: 20%;
    margin-right: -20%;
  }
  .section-content.from-left {
    margin-left: -20%;
    margin-right: 20%;
  }
  .section-content.from-bottom {
    margin-top: 20%;
    margin-bottom: -20%;
  }
</style>
